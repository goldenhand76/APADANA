"""
Django settings for Angizeh_2 project.

Generated by 'django-admin startproject' using Django 4.0.1.

For more information on this file, see
https://docs.djangoproject.com/en/4.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.0/ref/settings/
"""
import os
import environ
from django.utils.translation import gettext_lazy as _

from pathlib import Path
from datetime import timedelta

env = environ.Env(DEBUG=(bool, True))

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent
ENV_DIR = Path(__file__).resolve().parent

if str(BASE_DIR) == "G:\\PycharmProjects\\Angizeh_2\\Backend":
    environ.Env.read_env(os.path.join(ENV_DIR, '.env'))
    print("Development Environment")
elif str(BASE_DIR) == "/var/www/Angizeh_2":
    environ.Env.read_env(os.path.join(ENV_DIR, '.env'))
    print("Production Environment")
else:
    environ.Env.read_env(os.path.join(ENV_DIR, '.env.dev'))
    print("CI Environment")

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = env('SECRET_KEY')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = env("DEBUG")

ALLOWED_HOSTS = ["127.0.0.1", "localhost", "0.0.0.0"]# env("DJANGO_ALLOWED_HOSTS").split(" ")

# Add to project/settings.py
# SECURE_HSTS_SECONDS = 30  # Unit is seconds; *USE A SMALL VALUE FOR TESTING!*
# SECURE_HSTS_PRELOAD = True
# SECURE_HSTS_INCLUDE_SUBDOMAINS = True
# SECURE_PROXY_SSL_HEADER = ("HTTP_X_FORWARDED_PROTO", "https")
# SESSION_COOKIE_SECURE = True
# CSRF_COOKIE_SECURE = True

AUTH_USER_MODEL = 'authentication.User'

AUTHENTICATION_BACKENDS = [
    # AxesStandaloneBackend should be the first backend in the AUTHENTICATION_BACKENDS list.
    # 'axes.backends.AxesStandaloneBackend',

    # Django ModelBackend is the default authentication backend.
    'django.contrib.auth.backends.ModelBackend',
]

ACCOUNT_EMAIL_REQUIRED = False

# Application definition

INSTALLED_APPS = [
    'rest_framework',
    'rest_framework_simplejwt.token_blacklist',
    'django_better_admin_arrayfield',
    'corsheaders',
    'django_filters',
    # 'debug_toolbar',
    # 'jet.dashboard',
    # 'jet',
    # 'axes',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'softdelete',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.postgres',
    'django.contrib.sites',
    'actstream',
    'drf_yasg',
    'channels',
    'activity',
    'notifications',
    'authentication',
    'condition',
    'automation',
    'monitoring',
    'history',
    'device',
    'settings',
    # 'django_otp',
    # 'django_otp.plugins.otp_static',
    # 'django_otp.plugins.otp_totp',
    # 'two_factor'
]

SITE_ID = 1

ACTSTREAM_SETTINGS = {
    "USE_JSONFIELD": True,
}

DJANGO_NOTIFICATIONS_CONFIG = {
    'USE_JSONFIELD': True
}

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.locale.LocaleMiddleware',
    # 'debug_toolbar.middleware.DebugToolbarMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    # 'django_otp.middleware.OTPMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    # 'axes.middleware.AxesMiddleware',
]

ROOT_URLCONF = 'Angizeh_2.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates'],
        # 'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
            'loaders': (
                'django.template.loaders.filesystem.Loader',
                'django.template.loaders.app_directories.Loader',
            ),
        },
    },
]

X_FRAME_OPTIONS = 'SAMEORIGIN'

# Asgi config to implement websocket server.
ASGI_APPLICATION = "Angizeh_2.asgi.application"
WSGI_APPLICATION = 'Angizeh_2.wsgi.application'

# Database
# https://docs.djangoproject.com/en/4.0/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': env('SQL_ENGINE'),
        'NAME': env('POSTGRES_DB'),
        'USER': env('POSTGRES_USER'),
        'PASSWORD': env('POSTGRES_PASSWORD'),
        'HOST': env('POSTGRES_HOST'),
        'PORT': env('POSTGRES_PORT')
    }
}

# Influx DB config
INFLUXDB_HOST = env('INFLUXDB_HOST')
INFLUXDB_PORT = env('INFLUXDB_PORT')
INFLUXDB_USERNAME = 'leo'
INFLUXDB_PASSWORD = 'Goldenhand76'
INFLUXDB_DATABASE = 'ANGIZEH'
INFLUXDB_TIMEOUT = 30
INFLUXDB_TOKEN = env('INFLUXDB_TOKEN')
INFLUXDB_ORG = env('INFLUXDB_ORG')


# Password validation
# https://docs.djangoproject.com/en/4.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/4.0/topics/i18n/

LANGUAGE_CODE = 'fa'

TIME_ZONE = 'Asia/Tehran'

USE_I18N = True

USE_L10N = True

USE_TZ = True

CSRF_TRUSTED_ORIGINS = [
    'http://127.0.0.1:8000',
    'http://localhost:7000',
    'http://127.0.0.1:8080',
    'http://localhost:8080']
CORS_ORIGIN_ALLOW_ALL = True
CORS_ALLOW_CREDENTIALS = True
CORS_ORIGIN_WHITELIST = (
    "http://127.0.0.1:8000",
    "http://localhost:3000",
    "http://127.0.0.1:8080",
    "https://localhost:3000",
    "https://127.0.0.1:8080",
)

INTERNAL_IPS = [
    "127.0.0.1", "*"
]

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.0/howto/static-files/

MEDIA_ROOT = os.path.join(BASE_DIR, "media")
# MEDIA_DIR = os.path.join(BASE_DIR, "media")
MEDIA_URL = '/media/'

STATIC_ROOT = os.path.join(BASE_DIR, 'static')
STATIC_URL = '/static/'
# STATICFILES_DIRS = (
#     os.path.join(BASE_DIR, 'static2'),
# )

# Default primary key field type
# https://docs.djangoproject.com/en/4.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Set jwt authentication class.
REST_FRAMEWORK = {
    'NONE_FIELD_ERRORS_KEY': 'error',
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
    'PAGE_SIZE': 10,
    'USER_DETAILS_SERIALIZER': 'authentication.serializers.UserDetailsSerializer',
    'DEFAULT_AUTHENTICATION_CLASSES': ('rest_framework_simplejwt.authentication.JWTAuthentication',
                                       # 'rest_framework.authentication.SessionAuthentication',
                                       ),
    'DEFAULT_THROTTLE_CLASSES': [
        'rest_framework.throttling.AnonRateThrottle',
        'rest_framework.throttling.UserRateThrottle'
    ],
    'DEFAULT_THROTTLE_RATES': {
        'anon': '5/min',
        'user': '100/min'
    },
    "EXCEPTION_HANDLER": "authentication.exceptions.rest_exception_handler"
}

# Use Zoho email to send reset password email.
EMAIL_USE_TLS = True
EMAIL_HOST = 'smtppro.zoho.com'
EMAIL_PORT = 587
EMAIL_HOST_USER = 'support@angizehco.com'
EMAIL_HOST_PASSWORD = 'YY*KSf4a'
DEFAULT_FROM_EMAIL = 'support@angizehco.com'

# Zoho Application Password : viranique = S2LEi2B7Dw06
# Expire tokens
SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(days=1),
    'REFRESH_TOKEN_LIFETIME': timedelta(days=2)
}

SWAGGER_SETTINGS = {
    'USE_SESSION_AUTH': False,
    'SECURITY_DEFINITIONS': {
        'Bearer': {
            'type': 'apiKey',
            'name': 'Authorization',
            'in': 'header'
        }
    }
}

LOGGING = {
    'version': 1,
    'disable_existing_loggers': True,
    'formatters': {
        'standard': {
            'format': '{asctime} {levelname} {message}',
            'style': '{',
        },
        "request_formatter": {
            "format": "%(asctime)s  - %(name)s - %(ip)s - %(levelname)s -  %(message)s  - %(status_code)s",
            "datefmt": "%Y-%m-%d %H:%M:%S"
        },
    },
    'handlers': {
        'null': {
            'level': 'DEBUG',
            'class': 'logging.NullHandler',
        },
        'file': {
            'level': 'DEBUG',
            'class': 'logging.FileHandler',
            'filename': os.path.join(BASE_DIR, 'debug.log'),
        },
        'daphne': {
            'level': 'DEBUG',
            'class': 'logging.FileHandler',
            'filename': os.path.join(BASE_DIR, 'daphne.log'),
        },
        # 'console': {
        #     'level': 'DEBUG',
        #     'class': 'logging.StreamHandler',
        #     'formatter': 'standard'
        # },
        'request': {
            "level": "DEBUG",
            "class": "logging.handlers.RotatingFileHandler",
            "formatter": "request_formatter",
            'filename': os.path.join(BASE_DIR, 'request.log'),
            "maxBytes": 1024000,
            "backupCount": 3
        }
    },
    'loggers': {
        'django': {
            'handlers': ['file'],
            'level': 'DEBUG',
            'propagate': True,
        },
        'daphne': {
            'handlers': ['daphne'],
            'level': 'DEBUG',
            'propagate': True,
        },
        'django.db.backends': {
            'handlers': ['null'],  # Quiet by default!
            'propagate': False,
            'level': 'DEBUG',
        },
        # 'django.request': {
        #     "level": "DEBUG",
        #     "handlers": ["request"],
        #     'propagate': True,
        # },
    }
}

CACHES = {
    'default': {
        'BACKEND': 'django.core.cache.backends.memcached.PyMemcacheCache',
        'LOCATION': env('MEMCACHED_HOST'),
        'TIMEOUT': 60,
    }
}

# channel layer used to share messages in redis database in groups .
CHANNEL_LAYERS = {
    "default": {
        "BACKEND": "channels_redis.core.RedisChannelLayer",
        "CONFIG": {
            "hosts": [env('REDIS_HOST')]
        },
    },
}

CELERY_BROKER_URL = env('CELERY_BROKER_URL')
CELERY_RESULT_BACKEND = env('CELERY_RESULT_BACKEND')
CELERY_ACCEPT_CONTENT = ['application/json']
CELERY_TASK_SERIALIZER = 'json'
CELERY_RESULT_SERIALIZER = 'json'
CELERY_TIMEZONE = "Asia/Tehran"
CELERY_TASK_TRACK_STARTED = True
CELERY_TASK_TIME_LIMIT = 60
CELERY_IGNORE_RESULT = True
CELERY_TASK_RESULT_EXPIRES = 600

CELERY_ALWAYS_EAGER = False
CELERY_ACKS_LATE = True
CELERY_TASK_PUBLISH_RETRY = True
CELERY_DISABLE_RATE_LIMITS = False

LOCALE_PATH = (os.path.join(BASE_DIR, "locale"),)

LANGUAGES = [
    ('fa', _('Farsi')),
    ('en', _('English')),
]

# LOGIN_URL = "two_factor:login"
# LOGIN_REDIRECT_URL = "two_factor:profile"
